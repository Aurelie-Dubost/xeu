def get_vol_move_decomp(udl_list, matu_list, start_date, end_date):
    # Get spot prices at start and end dates
    df_spot_start = get_spot(udl_list, start_date, start_date)
    df_spot_end = get_spot(udl_list, end_date, end_date)
    
    # Round spot prices to the highest integer
    df_spot_start = df_spot_start.applymap(lambda x: round_number(x, rounding_to=1))
    df_spot_end = df_spot_end.applymap(lambda x: round_number(x, rounding_to=1))
    
    # Create strike dictionaries for start and end dates
    strikes_dict_start = {col: df_spot_start[col].unique().tolist() for col in udl_list if col in df_spot_start.columns}
    strikes_dict_end = {col: df_spot_end[col].unique().tolist() for col in udl_list if col in df_spot_end.columns}
    
    # Generate df_shift and df_smile using get_vol_shift_df
    df_shift = get_vol_shift_df(udl_list, matu_list, strikes_dict_start, start_date, end_date)
    df_smile = get_vol_shift_df(udl_list, matu_list, strikes_dict_end, start_date, end_date)
    
    # Calculate the changes in each column of df_shift, df_smile, and df_atm
    df_atm = df_shift.copy()  # Assuming df_atm is calculated similarly
    df_shift_chg = df_shift.loc[end_date] - df_shift.loc[start_date]
    df_smile_chg = df_smile.loc[end_date] - df_smile.loc[start_date]
    df_atm_chg = df_atm.loc[end_date] - df_atm.loc[start_date]
    
    # Ensure these are DataFrames
    df_shift_chg = df_shift_chg.to_frame() if isinstance(df_shift_chg, pd.Series) else df_shift_chg
    df_smile_chg = df_smile_chg.to_frame() if isinstance(df_smile_chg, pd.Series) else df_smile_chg
    df_atm_chg = df_atm_chg.to_frame() if isinstance(df_atm_chg, pd.Series) else df_atm_chg
    
    # Stack the data horizontally for a single row
    stacked_values = np.hstack([df_shift_chg.values.flatten(), df_atm_chg.values.flatten(), df_smile_chg.values.flatten()])
    
    # Create MultiIndex for the columns
    arrays = [
        np.tile(df_shift_chg.columns, 3),  # Repeat each UDL for df_shift, df_atm, and df_smile
        np.repeat(['df_shift', 'df_atm', 'df_smile'], len(df_shift_chg.columns))  # Repeat for each type
    ]
    columns = pd.MultiIndex.from_arrays(arrays, names=('udl', 'type'))
    
    # Create the DataFrame with a single row
    df_vol_chgs = pd.DataFrame([stacked_values], columns=columns, index=[end_date])
    
    # Multiply by 100 to get percentage changes
    df_vol_chgs *= 100
    
    return df_shift_chg, df_smile_chg, df_vol_chgs