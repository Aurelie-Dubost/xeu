import numpy as np
import pandas as pd
from scipy.stats import percentileofscore

def backfill_missing_data(nested_dict, udl, translated_strike_type, direction="backward"):
    """
    Backfills missing data using either the most recent past data ('backward') or the next available future data ('forward').
    Prints the date used for backfilling.
    """
    all_dates = sorted(nested_dict.keys())  # Sort dates chronologically
    data_frames = []

    # Build a time-series DataFrame for all parameter/maturity combinations
    for date in all_dates:
        if udl in nested_dict[date] and translated_strike_type in nested_dict[date][udl]:
            for matu, param_dict in nested_dict[date][udl][translated_strike_type].items():
                for param, value in param_dict.items():
                    data_frames.append(pd.DataFrame({(param, matu): [value]}, index=[date]))

    # Combine all extracted data into a single DataFrame
    if data_frames:
        full_data = pd.concat(data_frames, axis=1)
        full_data.index = pd.to_datetime(full_data.index)  # Convert index to datetime
        full_data = full_data.sort_index()  # Ensure chronological order
    else:
        print("No data available for backfilling.")
        return None

    # Choose fill direction
    if direction == "backward":
        filled_data = full_data.bfill()  # Use the most recent past data
    elif direction == "forward":
        filled_data = full_data.ffill()  # Use the next available future data
    else:
        raise ValueError("Invalid direction. Use 'backward' or 'forward'.")

    # Print which date was used for filling
    fill_dates = (filled_data.notna() & full_data.isna()).idxmax()
    for col, fill_date in fill_dates.items():
        print(f"Backfilled {(col[0], col[1])} using data from {fill_date.strftime('%Y-%m-%d')}")

    return filled_data

def calculate_percentile_rank_surface(nested_dict, udl, date, moneyness_levels, delta_levels, strike_type="Moneyness", transpose=False, backfill_direction="backward"):
    """
    Calculate percentile rank surfaces while using the backfilling function for missing data.
    """
    # Define translation dictionary for strike types
    translation_dict = {"Moneyness": "IV", "Delta": "IVTD"}
    
    # Get translated strike type
    translated_strike_type = translation_dict.get(strike_type, strike_type)

    try:
        # Ensure date is in string format
        date_str = date if isinstance(date, str) else date.strftime("%Y-%m-%d")
        
        # Determine parameter levels based on strike type
        if translated_strike_type == "IV":
            param_levels = moneyness_levels
        elif translated_strike_type == "IVTD":
            param_levels = delta_levels
        else:
            print("Invalid vol type selected.")
            return None

        # Get backfilled data
        filled_data = backfill_missing_data(nested_dict, udl, translated_strike_type, direction=backfill_direction)
        if filled_data is None or date_str not in filled_data.index.strftime("%Y-%m-%d").tolist():
            print(f"No available data for {date_str} after backfill.")
            return None

        # Create empty DataFrame for storing percentiles
        percentile_rank_surface = pd.DataFrame(index=param_levels, columns=filled_data.columns.levels[1])

        # Calculate percentiles for each maturity
        for param in param_levels:
            for matu in percentile_rank_surface.columns:
                values = filled_data[(param, matu)].dropna().values  # Drop NaNs for percentile calculation
                current_value = filled_data.at[pd.to_datetime(date_str), (param, matu)]

                if len(values) > 0:
                    percentile = percentileofscore(values, current_value, kind="mean")
                    percentile_rank_surface.at[param, matu] = percentile
                else:
                    percentile_rank_surface.at[param, matu] = np.nan

    except KeyError as e:
        print(f"KeyError encountered: {e}")
        return None

    except Exception as e:
        print(f"An error occurred in calculate_percentile_rank_surface: {e}")
        return None

    return percentile_rank_surface