# Cache for plot-specific widgets
plot_widgets_cache = {}

def create_plot_controls(plot_type):
    """Creates and caches parameter controls for a given plot type."""
    # If widgets for this plot type are already created, return them
    if plot_type in plot_widgets_cache:
        return plot_widgets_cache[plot_type]
    
    # Otherwise, create new widgets and cache them
    controls = []
    for param in plot_registry[plot_type]["params"]:
        if param == "color":
            widget = widgets.ColorPicker(value=plot_registry[plot_type]["params"][param], description=param)
        else:
            widget = widgets.FloatSlider(value=plot_registry[plot_type]["params"][param], min=0.1, max=2.0, step=0.1, description=param)
        controls.append(widget)
    
    # Cache the controls for this plot type
    plot_widgets_cache[plot_type] = controls
    return controls

def update_customization_window(plot_type):
    """Updates the customization window to show only widgets for the selected plot type."""
    # Get or create widgets for the selected plot type
    controls = create_plot_controls(plot_type)
    
    # Clear customization window and add the plot-specific controls
    customization_window.children = controls + [widgets.Button(description="Save Changes")]

# Modify the plot type dropdown to update the customization window when a new type is selected
plot_type_dropdown = widgets.Dropdown(options=list(plot_registry.keys()), description="Plot Type:")
plot_type_dropdown.observe(lambda change: update_customization_window(change.new), names="value")

# Initialize the customization window with the default plot type
update_customization_window(plot_type_dropdown.value)

# Display the layout including the plot type dropdown
display(widgets.VBox([plot_type_dropdown, customization_window]))