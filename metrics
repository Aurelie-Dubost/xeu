import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import norm

# Simulate data
np.random.seed(0)
dates = pd.date_range(start='2020-01-01', periods=200)
returns = np.random.normal(0.001, 0.02, 200)  # Daily returns: mean = 0.1%, std = 2%
data = pd.DataFrame(data={'Date': dates, 'Returns': returns})
data['Cumulative Returns'] = (1 + data['Returns']).cumprod() - 1

# Calculate metrics
risk_free_rate = 0.01 / 252  # Assuming a 1% annual risk-free rate
sharpe_ratio = (data['Returns'].mean() - risk_free_rate) / data['Returns'].std() * np.sqrt(252)
sortino_ratio = (data['Returns'].mean() - risk_free_rate) / data['Returns'][data['Returns'] < 0].std() * np.sqrt(252)
max_drawdown = (data['Cumulative Returns'].cummax() - data['Cumulative Returns']).max()
calmar_ratio = data['Returns'].mean() * 252 / max_drawdown

# Print metrics
print(f"Sharpe Ratio: {sharpe_ratio:.2f}")
print(f"Sortino Ratio: {sortino_ratio:.2f}")
print(f"Max Drawdown: {max_drawdown:.2f}")
print(f"Calmar Ratio: {calmar_ratio:.2f}")

# Plots
plt.figure(figsize=(15, 12))

# Equity curve
plt.subplot(3, 1, 1)
plt.plot(data['Date'], data['Cumulative Returns'], label='Equity Curve')
plt.title('Equity Curve')
plt.xlabel('Date')
plt.ylabel('Cumulative Returns')
plt.legend()

# Drawdown curve
plt.subplot(3, 1, 2)
drawdown = data['Cumulative Returns'].cummax() - data['Cumulative Returns']
plt.fill_between(data['Date'], drawdown, color='red', step='pre', alpha=0.4)
plt.title('Drawdown Curve')
plt.xlabel('Date')
plt.ylabel('Drawdown')

# Return distribution
plt.subplot(3, 1, 3)
plt.hist(data['Returns'], bins=30, alpha=0.7, color='blue', edgecolor='black')
plt.axvline(data['Returns'].mean(), color='red', linestyle='dashed', linewidth=2)
plt.title('Return Distribution')
plt.xlabel('Returns')
plt.ylabel('Frequency')

plt.tight_layout()
plt.show()