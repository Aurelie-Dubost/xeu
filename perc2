import pandas as pd
import numpy as np

def calculate_percent_rank_inc(data, start_date=None, end_date=None):
    """
    Calculate PercentRank.INC for each row compared to all previous rows in a Series.

    Parameters:
    data (pd.Series, pd.DataFrame, dict): Input data. Expected dictionary format: {date: {nested_keys: value}}
    start_date (str): Optional start date for filtering data.
    end_date (str): Optional end date for filtering data.

    Returns:
    pd.Series: Series with PercentRank.INC values.
    """
    # Convert input data to a Series
    if isinstance(data, pd.DataFrame):
        if data.shape[1] != 1:
            raise ValueError("DataFrame input should have exactly one column.")
        series = data.iloc[:, 0]
    elif isinstance(data, dict):
        # Flatten the nested dictionary to extract the values
        flat_data = {}
        for date, nested_dict in data.items():
            for key, value in nested_dict.items():
                flat_data[pd.to_datetime(date)] = value  # Assuming we only care about the numerical values
        
        series = pd.Series(flat_data)
    elif isinstance(data, pd.Series):
        series = data
    else:
        raise TypeError("Input data should be a pandas Series, DataFrame, or dictionary.")
    
    # Ensure the series has a datetime index
    if not isinstance(series.index, pd.DatetimeIndex):
        raise TypeError("The index of the series must be a DatetimeIndex.")
    
    # Filter by date range if specified
    if start_date or end_date:
        start_date = pd.to_datetime(start_date) if start_date else series.index.min()
        end_date = pd.to_datetime(end_date) if end_date else series.index.max()
        series = series.loc[start_date:end_date]
    
    if series.empty:
        return pd.Series([], index=series.index)
    
    # Calculate ranks
    series_values = series.values
    ranks = np.zeros_like(series_values, dtype=float)
    ranks[0] = 1  # The first value has the highest rank
    
    for i in range(1, len(series_values)):
        num_less_than_target = np.sum(series_values[:i] < series_values[i])
        ranks[i] = num_less_than_target / i
    
    return pd.Series(ranks, index=series.index)

# Example usage with a nested dictionary
data = {
    '2024-05-20': {'nested_key_1': 0},
    '2024-05-21': {'nested_key_1': 0},
    '2024-05-22': {'nested_key_1': -1},
    '2024-05-23': {'nested_key_1': 0},
    '2024-05-24': {'nested_key_1': -10},
    '2024-05-25': {'nested_key_1': 20},
    '2024-05-26': {'nested_key_1': 1},
    '2024-05-27': {'nested_key_1': 2},
    '2024-05-28': {'nested_key_1': 3},
}

# Apply the function with date range
start_date = "2024-05-22"
end_date = "2024-05-27"
result = calculate_percent_rank_inc(data, start_date=start_date, end_date=end_date)
print(result)